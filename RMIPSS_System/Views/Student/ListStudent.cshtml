@{
    ViewData["Title"] = "Student List";
}

@model StudentListViewModel

<style>
    .container {
        max-width: none !important;
        padding: 20px;
    }
</style>

<div class="content">
    <div class="table-container">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h4>List of Students</h4>
            <span>Total Students: @Model.TotalStudents</span>
        </div>

        <div class="flex-between-center">
            <form method="get" style="display: inline;">
                <label for="pageSize" style="display: inline;">Show:</label>
                <select name="pageSize" class="form-select w-auto d-inline-block mb-3" onchange="this.form.submit()">
                    <option value="10" selected="@(Model.PageSize == 10)">10</option>
                    <option value="20" selected="@(Model.PageSize == 20)">20</option>
                    <option value="50" selected="@(Model.PageSize == 50)">50</option>
                </select>
                <input type="hidden" name="search" value="@Model.SearchTerm"/>
            </form>

            <div class="search-container">
                <form method="get">
                    <input type="text" name="search" value="@Model.SearchTerm" placeholder="Search by Name...">
                    <input type="hidden" name="pageSize" value="@Model.PageSize"/>
                    <button type="submit"><i class="fa fa-search"></i></button>
                </form>
                <small>Press Enter to search</small>
            </div>
        </div>

        <div class="table-responsive">
            <table class="list-student-table table table-bordered table-striped">
                <thead class="table-primary">
                    <tr class="table-head-center">
                        <th>Name</th>
                        <th>Email</th>
                        <th>Grade</th>
                        <th>Address</th>
                        <th>Phone Number</th>
                        <th>Date of Birth</th>
                        <th>Last Completed Step</th>
                        <th>Step Completed Date</th>
                        <th>View</th>
                    </tr>
                </thead>
                <tbody id="tableBody">
                    @foreach (var student in Model.Students)
                    {
                        <tr>
                            <td>
                                @student.FirstName
                                @(student.MiddleInitial.HasValue ? student.MiddleInitial.Value.ToString() + "." : "")
                                @student.LastName
                            </td>
                            <td>@student.Email</td>
                            <td>@student.Grade</td>
                            <td>@student.Village, @student.Atoll, @student.PoBoxNo</td>
                            <td>@student.Phone</td>
                            <td>@student.DOB</td>
                            <td>SE-2 Form</td>
                            <td>1/1/2020</td>
                            <td class="icon-center">
                                <a asp-area="" asp-controller="Student" asp-action="StudentViewDetails" asp-route-id="@student.Id"><i class="fas fa-eye"></i></a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="pagination">
            @if (Model.TotalStudents > Model.PageSize)
            {
                int totalPages = (int)Math.Ceiling((double)Model.TotalStudents / Model.PageSize);
                int maxPagesToShow = 5; // Number of pages visible before using ellipsis

                int startPage = Math.Max(1, Model.CurrentPage - 2);
                int endPage = Math.Min(totalPages, Model.CurrentPage + 2);

                // Previous Button
                if (Model.CurrentPage > 1)
                {
                    <a href="@Url.Action("ListStudent", new { pageNo = Model.CurrentPage - 1, search = Model.SearchTerm, pageSize = Model.PageSize })">« Prev</a>
                }

                // First Page Always Visible
                if (startPage > 1)
                {
                    <a href="@Url.Action("ListStudent", new { pageNo = 1, search = Model.SearchTerm, pageSize = Model.PageSize })">1</a>
                    if (startPage > 2)
                    {
                        <span>...</span> <!-- Ellipsis -->
                    }
                }

                // Display a range of pages dynamically
                for (int i = startPage; i <= endPage; i++)
                {
                    <a href="@Url.Action("ListStudent", new { pageNo = i, search = Model.SearchTerm, pageSize = Model.PageSize })" class="@(i == Model.CurrentPage ? "active" : "")">
                        @i
                    </a>
                }

                // Last Page Always Visible
                if (endPage < totalPages)
                {
                    if (endPage < totalPages - 1)
                    {
                        <span>...</span> <!-- Ellipsis -->
                    }
                    <a href="@Url.Action("ListStudent", new { pageNo = totalPages, search = Model.SearchTerm, pageSize = Model.PageSize })">@totalPages</a>
                }

                // Next Button
                if (Model.CurrentPage < totalPages)
                {
                    <a href="@Url.Action("ListStudent", new { pageNo = Model.CurrentPage + 1, search = Model.SearchTerm, pageSize = Model.PageSize })">Next »</a>
                }
            }
        </div>
    </div>
</div>
